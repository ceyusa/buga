#!/usr/bin/env python

import os
import xmlrpclib
import urllib
from subprocess import Popen, CalledProcessError, PIPE
import re
import sys
import pprint
import argparse

def checkURL(url):
    try:
	urllib.urlopen(url)
    except IOError:
	return False
    return True

class BlogError(Exception):
    METHOD_NOT_SUPPORTED = 'Method not (yet) supported'

    def __init__(self, msg):
	self.msg  = msg

    def __repr__(self):
	return self.msg

    __str__ = __repr__

class Blog:
    def __init__(self, uri, user, pwd, default_blog_id = None, key = '1'):
	self.user = user
	self.pwd = pwd
	self.key = key
	if default_blog_id is not None:
	    self.default_blog_id = default_blog_id

	# Check if URL exists
	if not checkURL(uri):
	    raise BlogError('XML-RPC API URL not found.')

	# Connect to the api. Call listMethods to keep a dictionary of
	# available methods
	self._server = xmlrpclib.ServerProxy(uri)

        try:
            self._methods = self._server.system.listMethods()
        except xmlrpclib.Fault, fault:
            raise BlogError(fault.faultString)

        self._methods.sort()

    def execute(self, methodname, *args):
        if not methodname in self._methods:
            raise BlogError(BlogError.METHOD_NOT_SUPPORTED)

        try:
            r = getattr(self._server, methodname)(*args)
        except xmlrpclib.Fault, fault:
            raise BlogError(fault.faultString)

        return r

class MetaWeblog(Blog):
    def __init__(self, uri, user, pwd, default_blog_id, key):
	Blog.__init__(self, uri, user, pwd, default_blog_id, key)

    def get_recent_posts(self, numposts = 10, blog_id = None):
	if blog_id is None:
	    if self.default_blog_id is None:
		raise BlogError("No blog_id passed")
	    blog_id = self.default_blog_id

        return self.execute('metaWeblog.getRecentPosts',
                            blog_id, self.user, self.pwd, numposts)

    def get_post(self, post_id):
	return self.execute('metaWeblog.getPost', post_id, self.user, self.pwd)

    def new_post(self, content, publish = False, blog_id = None):
	if blog_id is None:
	    if self.default_blog_id is None:
		raise BlogError("No blog_id passed")
	    blog_id = self.default_blog_id

        return self.execute('metaWeblog.newPost', blog_id, self.user, self.pwd,
                            content, publish)

    def edit_post(self, post_id, new_post, publish = True):
	return self.execute('metaWeblog.editPost', post_id, self.user, self.pwd,
			    new_post, publish)

    def delete_post(self, post_id, publish = True):
	return self.execute('metaWeblog.deletePost', self.key, post_id,
			    self.user, self.pwd, publish)

def get_config ():
    cfg = {}
    to_run = ['git', 'config', '--get-regex', 'blog']
    process = Popen(to_run, stdout = PIPE, stderr = None, stdin = None)
    output, error = process.communicate()
    if process.returncode != 0:
        return None;

    for line in output.strip().split("\n"):
        m = re.match("blog.(\S+)\s+(.*)", line.strip())
        name = m.group(1)
        value = m.group(2)
        cfg[name] = value

    return cfg

def build_content(categories):
    title = sys.stdin.readline().strip()

    body = []
    for line in sys.stdin.readlines():
        body.append(line.strip())
    description = ' '.join(body)

    content = { 'title': title,
                'description': description }

    if len(categories) > 0:
        content['categories'] = categories

    return content

def do_add(blog, args):
    content = build_content(args.categories)
    post_id = blog.new_post(content, True)
    print post_id

def do_rm(blog, args):
    return blog.delete_post(args.id)

def do_update(blog, args):
    content = build_content(args.categories)
    return blog.edit_post(args.id, content)

def do_list(blog, args):
    posts = blog.get_recent_posts(args.count)
    for p in posts:
        print "{0} - {1}".format(p['postid'], p['title'].encode('utf-8'))

def main(args):
    cfg = get_config()
    if cfg is None:
        sys.stderr.write('No configuration found\n')
        exit(-1)

    if len(args) > 1:
        command = args[1]
    else:
        command = ''

    args[1:2] = []

    parser = argparse.ArgumentParser()

    if command == 'add':
        parser.usage = "blogit add";
    elif command == 'rm':
        parser.usage = "blogit rm <ID>"
        parser.add_argument('id', metavar="ID", help='post id')
    elif command == 'update':
        parser.usage = "blogit update <post id>";
        parser.add_argument('id', metavar="ID", help='post id')
    elif command == 'list':
        parser.usage = "blogit list [-c count]";
        parser.add_argument('-s', '--count', metavar="N", type=int, default=10,
                            help='number of posts to list')
    else:
        print >>sys.stderr, "Usage: blogit [add|rm|update|list] --help"
        sys.exit(1)

    parser.add_argument("-c", "--categories", default="General",
                        help="categories to set in the post")
    parser.add_argument("-b", "--blogid",  default='1', metavar="ID",
                        help="set the blog id",)
    parser.add_argument("-k", "--blogkey", default='1', metavar="KEY",
                        help="set the blog key")

    args = parser.parse_args()
    args.categories = args.categories.split(',')

    blog = MetaWeblog(cfg['uri'],
                      cfg['username'],
                      cfg['password'],
                      args.blogid,
                      args.blogkey)

    if command == 'add':
        do_add(blog, args)
    elif command == 'rm':
        do_rm(blog, args)
    elif command == 'update':
        do_update(blog, args)
    elif command == 'list':
        do_list(blog, args)

if __name__ == '__main__':
	main(sys.argv)
